apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "spire.fullname" . }}-server-config
  labels:
    app.kubernetes.io/name: {{ template "spire.name" . }}
    {{- include "spire.common-labels" . | nindent 4 }}
data:
  spire-server.conf: |-
    server {
      ratelimit = {
        attestation = false
      }
      bind_address = "0.0.0.0"
      bind_port = "{{ .Values.server.port }}"
      trust_domain = "{{ .Values.trustDomain }}"
      data_dir = "/run/spire/data"
      log_level = "{{ .Values.server.logLevel }}"
      ca_ttl = "{{ .Values.server.caTTL }}"
      default_svid_ttl = "{{ .Values.server.svidDefaultTTL }}"
      # TODO: Do we need this? Will istio handle EC?
      ca_key_type = "rsa-4096"
      jwt_issuer = "{{ .Values.server.jwtIssuer }}"
    }

    plugins {
      UpstreamAuthority "disk" { plugin_data {
              cert_file_path = "/run/spire/tls/tls.crt"
              key_file_path = "/run/spire/tls/tls.key"
              bundle_file_path = "/run/spire/tls/ca.crt"
          }
      }

      DataStore "sql" {
        plugin_data {
          database_type = "postgres"
          connection_string = "dbname={{ .Values.server.database }} user=POSTGRESUSER password=POSTGRESPASS host={{ include "spire.fullname" . }}-postgres"
        }
      }

      NodeAttestor "k8s_sat" {
        plugin_data {
          clusters = {
            "{{ .Values.trustDomain }}" = {
              use_token_review_api_validation = true
              service_account_whitelist = ["{{ .Release.Namespace }}:{{ include "spire.fullname" . }}-agent"]
            }
          }
        }
      }

      NodeResolver "noop" {
        plugin_data {}
      }

      KeyManager "disk" {
        plugin_data {
          keys_path = "/run/spire/data/keys.json"
        }
      }

      Notifier "k8sbundle" {
        plugin_data {
          namespace = "{{ .Release.Namespace }}"
        }
      }
    }
  register: |-
    #!/bin/sh

    # This is an interim solution until we have a better way for seeding all
    # the workload and node attestation entries. For now, this allows the
    # JWKS provider to work and that's it

    create() {
      /opt/spire/bin/spire-server entry create $@ || echo "Entry creation failed: $@"
    }

    # Wait for the socket to appear
    while [ ! -S /tmp/spire-registration.sock ]; do
      echo "Waiting for registration socket"
      sleep 3
    done

    # Wait for the server to be healthy
    while ! /opt/spire/bin/spire-server healthcheck; do
      echo "Waiting for spire-server to be healthy"
      sleep 3
    done

    /opt/spire/bin/spire-server entry show | grep -q "Found 0" || exit 0

    create \
      -node \
      -spiffeID spiffe://{{ .Values.trustDomain }}/cluster \
      -selector k8s_sat:cluster:{{ .Values.trustDomain }} \

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/cluster \
      -spiffeID spiffe://{{ .Values.trustDomain }}/spire-jwks \
      -selector k8s:ns:{{ .Release.Namespace }} \
      -selector k8s:sa:spire-jwks \
      -selector k8s:pod-label:app.kubernetes.io/name:spire-jwks \
      -selector k8s:container-name:spire-jwks

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/ncn \
      -spiffeID spiffe://{{ .Values.trustDomain }}/ncn/workload/cpsmount \
      -selector unix:uid:0 \
      -selector unix:gid:0 \
      -selector unix:path:/usr/bin/cpsmount-spire-agent

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/compute \
      -spiffeID spiffe://{{ .Values.trustDomain }}/compute/workload/cpsmount \
      -selector unix:uid:0 \
      -selector unix:gid:0 \
      -selector unix:path:/usr/bin/cpsmount-spire-agent

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/compute \
      -spiffeID spiffe://{{ .Values.trustDomain }}/compute/workload/heartbeat \
      -selector unix:uid:0 \
      -selector unix:gid:0 \
      -selector unix:path:/usr/bin/heartbeat-spire-agent

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/ncn \
      -spiffeID spiffe://{{ .Values.trustDomain }}/ncn/workload/heartbeat \
      -selector unix:uid:0 \
      -selector unix:gid:0 \
      -selector unix:path:/usr/bin/heartbeat-spire-agent

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/compute \
      -spiffeID spiffe://{{ .Values.trustDomain }}/compute/workload/orca \
      -selector unix:uid:0 \
      -selector unix:gid:0 \
      -selector unix:path:/usr/bin/orca-spire-agent

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/ncn \
      -spiffeID spiffe://{{ .Values.trustDomain }}/ncn/workload/orca \
      -selector unix:uid:0 \
      -selector unix:gid:0 \
      -selector unix:path:/usr/bin/orca-spire-agent

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/compute \
      -spiffeID spiffe://{{ .Values.trustDomain }}/compute/workload/ckdump \
      -selector unix:uid:0 \
      -selector unix:gid:0 \
      -selector unix:path:/usr/bin/ckdump-spire-agent

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/ncn \
      -spiffeID spiffe://{{ .Values.trustDomain }}/ncn/workload/ckdump \
      -selector unix:uid:0 \
      -selector unix:gid:0 \
      -selector unix:path:/usr/bin/ckdump-spire-agent

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/compute \
      -spiffeID spiffe://{{ .Values.trustDomain }}/compute/workload/cfs-state-reporter \
      -selector unix:uid:0 \
      -selector unix:gid:0 \
      -selector unix:path:/usr/bin/cfs-state-reporter-spire-agent

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/ncn \
      -spiffeID spiffe://{{ .Values.trustDomain }}/ncn/workload/cfs-state-reporter \
      -selector unix:uid:0 \
      -selector unix:gid:0 \
      -selector unix:path:/usr/bin/cfs-state-reporter-spire-agent

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/ncn \
      -spiffeID spiffe://{{ .Values.trustDomain }}/ncn/workload/dvs-map \
      -selector unix:uid:0 \
      -selector unix:gid:0 \
      -selector unix:path:/usr/bin/dvs-map-spire-agent

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/compute \
      -spiffeID spiffe://{{ .Values.trustDomain }}/compute/workload/dvs-map \
      -selector unix:uid:0 \
      -selector unix:gid:0 \
      -selector unix:path:/usr/bin/dvs-map-spire-agent

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/ncn \
      -spiffeID spiffe://{{ .Values.trustDomain }}/ncn/workload/dvs-hmi \
      -selector unix:uid:0 \
      -selector unix:gid:0 \
      -selector unix:path:/usr/bin/dvs-hmi-spire-agent

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/compute \
      -spiffeID spiffe://{{ .Values.trustDomain }}/compute/workload/dvs-hmi \
      -selector unix:uid:0 \
      -selector unix:gid:0 \
      -selector unix:path:/usr/bin/dvs-hmi-spire-agent

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/ncn \
      -spiffeID spiffe://{{ .Values.trustDomain }}/ncn/workload/dvs-get-comp \
      -selector unix:uid:0 \
      -selector unix:gid:0 \
      -selector unix:path:/usr/bin/dvs-get-comp-spire-agent

    create \
      -parentID spiffe://{{ .Values.trustDomain }}/compute \
      -spiffeID spiffe://{{ .Values.trustDomain }}/compute/workload/dvs-get-comp \
      -selector unix:uid:0 \
      -selector unix:gid:0 \

    exit 0
